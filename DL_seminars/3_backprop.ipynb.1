{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Современные методы машинного обучения, ИАД\n",
    "\n",
    "## Семинар 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Градиентный спуск: цепное правило"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Из курса матанализа мы умеем дифферинциировать простые функции, например:\n",
    "\n",
    "$\\frac{dx^2}{dx} = 2x$  \n",
    "\n",
    "$\\frac{de^x}{dx} = e^ x$   \n",
    "\n",
    "$\\frac{dln(x)}{dx} = \\frac{1}{x}$\n",
    "\n",
    "Для использования цепного правила в градиентном спуске нам понадобится дифференциировать сложные функции.\n",
    "\n",
    "Сложная функция — это функция от функции.<br>Если u — функция от x, то есть u=u(x),  а f — функция от u:  f=f(u), то функция y=f(u) — сложная.\n",
    "\n",
    "Возьмем сложную функцию:<br>\n",
    "$z_1 = z_1(x_1, x_2)$<br>\n",
    "$z_2 = z_2(x_1, x_2)$<br>\n",
    "$p = p(z_1, z_2)$<br>\n",
    "\n",
    "где $z_1,z_2,p$ дифференциируемы\n",
    "\n",
    "\n",
    "Применим цепное правило:<br>\n",
    "### $\\frac{\\partial p}{\\partial x_1} = \\frac{\\partial p}{\\partial z_1} \\frac{\\partial z_1}{\\partial x_1} + \\frac{\\partial p}{\\partial z_2} \\frac{\\partial z_2}{\\partial x_1}$\n",
    "### $\\frac{\\partial p}{\\partial x_2} = \\frac{\\partial p}{\\partial z_1} \\frac{\\partial z_1}{\\partial x_2} + \\frac{\\partial p}{\\partial z_2} \\frac{\\partial z_2}{\\partial x_2}$\n",
    "\n",
    "<br>\n",
    "пример для $h(x) = f(x)g(x)$: \n",
    "### $\\frac{\\partial h}{\\partial x} = \\frac{\\partial h}{\\partial f} \\frac{\\partial f}{\\partial x} + \\frac{\\partial h}{\\partial g} \\frac{\\partial g}{\\partial x} = g \\frac{\\partial f}{\\partial x} + f \\frac{\\partial g}{\\partial x}$\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим граф вычисления для нашей композиции:\n",
    "<img src=\"pic1.png\" alt=\"Drawing\" style=\"width: 400px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим из него граф производных где каждому ребру будет прописана производная начала по концу:\n",
    "<img src=\"pic2.png\" alt=\"Drawing\" style=\"width: 300px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Можно догадаться как работает цепное правило\n",
    "<img src=\"pic3.png\" alt=\"Drawing\" style=\"width: 200px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><br>\n",
    "Добавим еще один скрытый слой:\n",
    "<img src=\"pic4.png\" alt=\"Drawing\" style=\"width: 500px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Применим цепное правило несколько раз:\n",
    "<img src=\"pic5.png\" alt=\"Drawing\" style=\"width: 600px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Рассмотрим что из себя представляет каждое слагаемое\n",
    "<img src=\"pic6.png\" alt=\"Drawing\" style=\"width: 600px;\"/>\n",
    "<img src=\"pic7.png\" alt=\"Drawing\" style=\"width: 600px;\"/>\n",
    "<img src=\"pic8.png\" alt=\"Drawing\" style=\"width: 600px;\"/>\n",
    "<img src=\"pic9.png\" alt=\"Drawing\" style=\"width: 600px;\"/>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Алгоритм вычисления производной в графе"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"pic10.png\" alt=\"Drawing\" style=\"width: 600px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Рассмотрим простую нейросеть:\n",
    "<img src=\"pic11.png\" alt=\"Drawing\" style=\"width: 600px;\"/>\n",
    "<img src=\"pic12.png\" alt=\"Drawing\" style=\"width: 600px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=\"5\">\n",
    "$\\sigma(x) = \\frac{1}{1 + e^{-x}}$\n",
    "<br>\n",
    "$L = 0.5*(y - z)^2$\n",
    "<br>\n",
    "$\\frac{\\partial L}{\\partial z} = ? $\n",
    "<br>\n",
    "$\\frac{\\partial L}{\\partial \\alpha} = ? $\n",
    "<br>\n",
    "$\\frac{\\partial L}{\\partial \\beta} = ? $\n",
    "\n",
    "</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Упражнение 1 **\n",
    "\n",
    "Сделайте три шага градиентного спуска и заполните таблицу при:\n",
    "$ \\alpha_0 = 0.5 $<br> $ \\beta_0 = 1 $"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "| $x_1$ | $x_2$ | y | s | z | L | $\\frac{\\partial L}{ \\partial z}$ | $\\frac{\\partial \\sigma}{ \\partial s}$ | $\\frac{\\partial L}{ \\partial \\alpha}$ | $\\frac{\\partial L}{ \\partial \\beta}$ | $\\alpha$ | $\\beta$ |\n",
    "| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n",
    "| 1 | 2 | 3 |  |  |  |  |  |  |  |  |  |\n",
    "| 1 | 2 | 3 |  |  |  |  |  |  |  |  |  |\n",
    "| 1 | 2 | 3 |  |  |  |  |  |  |  |  |  | |\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### О задании\n",
    "\n",
    "Задание посвящено реализации различных слоёв нейронной сети."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Часть 1. Реализация слоёв графа вычислений\n",
    "\n",
    "В этом задании мы реализуем граф вычислений для задачи распознавания изображений рукописных цифр на примере датасета [MNIST](http://yann.lecun.com/exdb/mnist/) — в частности, эта часть посвящена реализации всех требующихся для построения графа слоёв.\n",
    "\n",
    "Указанная задача является задачей классификации на $K = 10$ классов, поэтому будем строить граф вычислений, выходной слой которого будет содержать 10 нейронов, $k$-ый из которых вычисляет оценку принадлежности объекта $k$-ому классу. В качестве функционала качества в данной задаче будем использовать **кросс-энтропию**:\n",
    "\n",
    "$$Q(a, X) = -\\frac{1}{l}\\sum_{i=1}^l \\sum_{k=1}^K [y_i = k] \\log a_k(x_i),$$\n",
    "где\n",
    "\n",
    "$X = \\{ (x_i, y_i)\\}_{i=1}^l, \\, y_i \\in \\{1, \\dots, K\\},$ — обучающая выборка,\n",
    "\n",
    "$a(x) = (a_k(x))_{k=1}^K \\in \\mathbb{R}^K$ — прогноз графа вычислений для объекта $x$, состоящий из выходов $K$ нейронов выходного слоя (т.е. $a_k(x)$ — оценка принадлежности объекта $x$ классу $k$, построенная при помощи заданного графа вычислений).\n",
    "\n",
    "Нейрнонные сети обучаются с использованием стохастических методов оптимизации, однако для ускорения обучения и большей стабильности за один проход параметры оптимизируются по батчу — набору из нескольких тренировочных примеров, так же batch_size является дополнительной размерностью для входящих в слой тензоров.\n",
    "\n",
    "Для начала определим класс Layer, реализующий тождественный слой, который будет являться базовым классом для всех последующих."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Layer:\n",
    "    \"\"\"\n",
    "    A building block. Each layer is capable of performing two things:\n",
    "\n",
    "    - Process input to get output:           output = layer.forward(input)\n",
    "\n",
    "    - Propagate gradients through itself:    grad_input = layer.backward(input, grad_output)\n",
    "\n",
    "    Some layers also have learnable parameters which they update during layer.backward.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        Here you can initialize layer parameters (if any) and auxiliary stuff.\n",
    "        \"\"\"\n",
    "\n",
    "        raise NotImplementedError(\"Not implemented in interface\")\n",
    "\n",
    "    def forward(self, input):\n",
    "        \"\"\"\n",
    "        Takes input data of shape [batch, ...], returns output data [batch, ...]\n",
    "        \"\"\"\n",
    "\n",
    "        raise NotImplementedError(\"Not implemented in interface\")\n",
    "\n",
    "    def backward(self, input, grad_output):\n",
    "        \"\"\"\n",
    "        Performs a backpropagation step through the layer, with respect to the given input.\n",
    "\n",
    "        To compute loss gradients w.r.t input, you need to apply chain rule (backprop):\n",
    "\n",
    "        d loss / d x  = (d loss / d layer) * (d layer / d x)\n",
    "\n",
    "        Luckily, you already receive d loss / d layer as input, so you only need to multiply it by d layer / d x.\n",
    "\n",
    "        If your layer has parameters (e.g. dense layer), you also need to update them here using d loss / d layer\n",
    "        \"\"\"\n",
    "\n",
    "        raise NotImplementedError(\"Not implemented in interface\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 1**\n",
    "\n",
    "Используя приведенные прототипы, реализуйте слой, применяющий функцию активации ReLU (Rectified Linear Unit) поэлементно к каждому из входов слоя:\n",
    "$$\\text{ReLU}(z) = \\max (0, z)$$\n",
    "\n",
    "**Решение**.\n",
    "Производная $ReLU(x)$ равна 1 при $x>0$ и нулю при $x\\leq 0$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReLU(Layer):\n",
    "\n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        ReLU layer simply applies elementwise rectified linear unit to all inputs\n",
    "        This layer does not have any parameters.\n",
    "        \"\"\"\n",
    "        pass\n",
    "\n",
    "    def forward(self, input):\n",
    "        \"\"\"\n",
    "        Perform ReLU transformation\n",
    "        input shape: [batch, input_units]\n",
    "        output shape: [batch, input_units]\n",
    "        \"\"\"\n",
    "        return np.where(input > 0, input, np.zeros_like(input))\n",
    "\n",
    "    def backward(self, input, grad_output):\n",
    "        \"\"\"\n",
    "        Compute gradient of loss w.r.t. ReLU input\n",
    "        \"\"\"\n",
    "        grad = (input > 0) * np.ones_like(input) + (input <= 0) * np.zeros_like(input)\n",
    "        return grad * grad_output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 2**\n",
    "\n",
    "Используя указанные прототипы, реализуйте полносвязный слой, выход которого вычисляется следующим образом (подробнее в соответствующей [лекции](https://github.com/esokolov/ml-course-hse/blob/master/2017-fall/lecture-notes/lecture11-dl.pdf)):\n",
    "\n",
    "$$z = Wv + b, $$\n",
    "\n",
    "где\n",
    "* v — выход предыдущего слоя (вектор размера num_inputs);\n",
    "* W — матрица весов [num_inputs, num_outputs];\n",
    "* b — столбец свободных членов (вектор размера num_outputs).\n",
    "\n",
    "При каждом вызове backward() необходимо расчитать градиенты по выходу, используя chain-rule, и сделать один шаг градиентного спуска."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Решение**.\n",
    "Пусть размерность входного вектора $v$ равна $d$, а выходного вектора $z$ равна $m$. Для того, чтобы понимать, чему равна производная по $ij$-му элементу матрицы весов, распишем поподробнее, чему равно значение выхода линейной функции:\n",
    "$$\n",
    "    z_i = \\sum_{j=1}^d W_{ij}v_j + b_i\n",
    "$$\n",
    "\n",
    "Ещё раз вспомним формулу для производной сложной функции. Пусть нам дан градиент функции потерь по входам предыдущего слоя (то есть $\\cfrac{\\partial L}{\\partial f(v; W, b)}$. Назовём его $grad\\_output$. Заметим, что от элемента $W_{ij}$ зависит только $i$-я компонента выходного вектора $z$. Тогда производная по $ij$ элементу матрицы есть\n",
    "\n",
    "$$\n",
    "    \\cfrac{\\partial L}{\\partial W_{ij}} = \\left(\\cfrac{\\partial L}{\\partial z_i}\\right) \\cfrac{\\partial z_i}{\\partial W_{ij}}\n",
    "$$\n",
    "\n",
    "Теперь взглянем ещё раз на формулу подсчёта $z_i$ и поймём, что это линейная функция относительно $W_{ij}$, и производная $\\cfrac{\\partial z_i}{\\partial W_{ij}} = v_j$. \n",
    "\n",
    "Таким образом, производная функции потерь по матрице весов -- это такая матрица $dW$, что \n",
    "$$\n",
    "    dW_{ij} = grad\\_output[i] \\cdot v[j]\n",
    "$$\n",
    "\n",
    "Таким образом, мы вычислили производную по весам для единичного объекта. Когда $v$ и $z$ -- это батч объектов, формула незначительно изменится следующим образом. Будем полагать, что $v$ и $z$ это матрицы размрностей $batch\\_size \\times d$ и $batch\\_size \\times m$. $i$-я координата-столбец матрицы $z$ начинает зависеть от $W_{ij}$ для каждого объекта батча, поэтому для подсчёта производной $i$-й компоненты выхода по весу $W_{ij}$ нам нужно просуммировать зависимость по всем элементам батча, то есть\n",
    "$$\n",
    "    dW_{ij} = \\sum_{k=1}^{batch\\_size} v[k][j] \\cdot grad\\_output[k][i]\n",
    "$$\n",
    "\n",
    "Вспоминая определение умножения матриц, мы можем переписать это в простой матричной форме:\n",
    "$$\n",
    "    dW = v^T \\cdot grad\\_output\n",
    "$$\n",
    "\n",
    "Для производной по $b$ всё значительно проще. Для одного объекта от $b_i$ зависит лишь $z_i$, при этом при взгляде на определение $z_i$, мы получим\n",
    "\n",
    "$$\n",
    "    \\cfrac{\\partial z_i}{\\partial b_i} = 1\n",
    "$$\n",
    "\n",
    "Для батча объектов все эти единички нужно просуммировать по объектам:\n",
    "\n",
    "$$\n",
    "    \\cfrac{\\partial L}{b_i} = \\cfrac{\\partial L}{\\partial z} \\cfrac{\\partial z}{b_i} = \\sum_{k=0}^{batch\\_size} grad\\_output[k][i] \\cdot 1\n",
    "$$\n",
    "\n",
    "Далее разберёмся с производной по входам слоя (по $j$-й координате $v$). Теперь от координаты $v_j$ зависит $z_i$ **для каждого $i$**. Для каждой координаты $z_i$ зависимость от $v_j$ опять же линейная, поэтому производная $\\cfrac{\\partial z_i}{\\partial v_j} = W_{ij}$. Поскольку от $v_j$ зависят все компоненты вектора $z$, необходимо по ним просуммировать. Комбинируя всё с chain rule, получаем:\n",
    "\n",
    "$$\n",
    "    \\cfrac{\\partial L}{\\partial v_j} = \\sum_{i=1}^{m} \\cfrac{\\partial L}{\\partial z_i}\\cfrac{\\partial z_i}{\\partial v_j} = \\sum_{i=1}^{m} \\cfrac{\\partial L}{\\partial z_i}  W_{ij} = \\sum_{i=1}^{m} grad\\_output[i] \\cdot W_{ij}\n",
    "$$\n",
    "\n",
    "Что на языке умножения матриц можно переписать как\n",
    "\n",
    "$$\n",
    "     \\cfrac{\\partial L}{\\partial v} = grad\\_output^T \\cdot W\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обратите внимание, что в реализации ниже мы для удобства принимаем $W$ размера $d \\times m$, поэтому в формулах применены транспонирования в соответствии с размерностями."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Dense(Layer):\n",
    "\n",
    "    def __init__(self, input_units, output_units, learning_rate=0.1):\n",
    "        \"\"\"\n",
    "        A dense layer is a layer which performs a learned affine transformation:\n",
    "        f(x) = Wx + b\n",
    "\n",
    "        W: matrix of shape [num_inputs, num_outputs]\n",
    "        b: vector of shape [num_outputs]\n",
    "        \"\"\"\n",
    "\n",
    "        self.learning_rate = learning_rate\n",
    "\n",
    "        # initialize weights with small random numbers from normal distribution\n",
    "        # REMEMBER: input_units = d, output_units = m\n",
    "\n",
    "        self.W = np.random.randn(input_units, output_units)\n",
    "        self.b = np.random.randn(1, output_units)\n",
    "\n",
    "\n",
    "    def forward(self, input):\n",
    "        \"\"\"\n",
    "        Perform an affine transformation:\n",
    "        f(x) = <W*x> + b\n",
    " \n",
    "        input shape: [batch, input_units]\n",
    "        output shape: [batch, output units]\n",
    "        \"\"\"\n",
    "        # Wv + b\n",
    "        # v: shape [batch_size, d]\n",
    "        # W: shape [d, m]\n",
    "        # b: shape [m, ]\n",
    "        return input @ self.W + self.b\n",
    "\n",
    "    def backward(self, input, grad_output):\n",
    "        \"\"\"\n",
    "        Computes d f / d x = d f / d dense * d dense / d x,\n",
    "        where d dense/ d x = weights transposed, and performs\n",
    "        one step of gradient descent on W and b.\n",
    "\n",
    "        input shape: [batch, input_units]\n",
    "        grad_output: [batch, output units]\n",
    "\n",
    "        Returns: grad_input, gradient of output w.r.t input\n",
    "        \"\"\"\n",
    "        # input: shape [batch_size, d]\n",
    "        # W.T: shape [m, d]\n",
    "        # grad_inputs: shape [batch_size, d]\n",
    "        grad_inputs = grad_output @ self.W.T\n",
    "        \n",
    "        # grad_output: shape [batch_size, m]\n",
    "        # input.T: shape [d, batch_size]\n",
    "        # grad_W: shape [d, m]\n",
    "        grad_W = input.T @ grad_output\n",
    "\n",
    "        # grad_b: shape [m, ]\n",
    "        grad_b =  np.sum(grad_output, axis=0) * 1\n",
    "\n",
    "        # Gradient descent step\n",
    "        self.W -= self.learning_rate * grad_W\n",
    "        self.b -= self.learning_rate * grad_b\n",
    "        return grad_inputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 3**\n",
    "\n",
    "Как было сказано ранее, в качестве функционала качества в данной задаче мы будем использовать кросс-энтропию. Используя прототипы ниже, реализуйте вычисление данного функционала и его градиента по выходам графа вычислений.\n",
    "\n",
    "Кросс-энтропия предполагает, что модель для каждого объекта выдает вероятности принадлежности к каждому из $K$ классов, т.е. что для одного объекта все $K$ вероятностей неотрицательны и суммируются в 1. В нашем же случае в построении графа участвуют только полносвязный и ReLU слои, а потому выходы графа не являются вероятностями — как правило, в этом случае прогноз $z=a(x)$ модели нормируется при помощи функции softmax следующим образом:\n",
    "\n",
    "$$\\text{softmax}(z_k) = \\frac{\\exp(z_k)}{\\sum_{j=1}^K \\exp(z_j)}.$$\n",
    "\n",
    "При реализации указанных функций предполагается, что переданные в качестве параметров оценки принадлежности объектов классам не являются нормированными (их еще называют логитами), но при вычислении указанных величин используйте указанное выше преобразование для приведения этих оценок к корректному виду."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Решение**. Напомним формулу для кросс-энтропии для одного объекта\n",
    "$$\n",
    "    L(z, y) = -\\sum_{k=1}^{K} \\log (\\mathrm{softmax}(z))[y = k]\n",
    "$$\n",
    "Где $[y=k]$ это индикатор (равен 1, если это так и нулю иначе) того, что объект принадлежит к классу $k$. Возьмём производную софтмакса по $k$-й компоненте. Сначала перепишем немного лосс:\n",
    "$$\n",
    "    L(z, y) = -\\sum_{k=1}^{K}\\sum_{k=1}^{K} [y = k]\\left(z_k - \\log\\left(\\sum_{l=1}^K \\exp(z_l)\\right)\\right)\n",
    "$$\n",
    "\n",
    "В сумме по всевозможным $k$ только одно слагаемое не равно нулю -- того класса $k$, к которому принадлежит объект. Пользуемся формулой производной сложной функции. Напомним, что производная логарифма это \n",
    "$$\n",
    "    \\cfrac{\\partial \\log(x)}{\\partial x} = \\cfrac{1}{x}\n",
    "$$\n",
    "А производная экспоненты это\n",
    "\n",
    "$$\n",
    "    \\cfrac{\\partial \\exp(x)}{\\partial x} = \\exp(x)\n",
    "$$\n",
    "Записываем собственно саму производную функции потерь по логитам $z$:\n",
    "\n",
    "$$\n",
    "    \\cfrac{\\partial L}{\\partial z_j} = -\\sum_{k=1}^{k}[y=k]\\left(1 - \\cfrac{\\partial \\log\\left(\\sum_{l=1}^K \\exp(z_l)\\right)}{\\partial \\left(\\sum_{l=1}^K \\exp(z_l)\\right)} \\cdot \\cfrac{\\partial \\left(\\sum_{l=1}^K \\exp(z_l)\\right)}{\\partial z_j}\\right)\n",
    "$$\n",
    "\n",
    "В сумме по $l$ только одно слагаемое зависит от конкретного логита ($\\exp(z_j)$). Поэтому получаем\n",
    "\n",
    "$$\n",
    "    \\cfrac{\\partial L}{\\partial z_j} = -[y=k]\\left(1  - \\cfrac{1}{\\sum_{l=1}^K \\exp(z_l)} \\cdot \\exp(z_j)\\right)\n",
    "$$\n",
    "\n",
    "То есть в векторном виде это просто $-1 + \\mathrm{softmax}(z)$ для того $z_j$, что $j$ -- это метка класса у данного объекта."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "def softmax_crossentropy_with_logits(logits,reference_answers):\n",
    "    \"\"\"Compute crossentropy from logits[batch,n_classes] and ids of correct answers\"\"\"\n",
    "    logits_for_answers = logits[np.arange(len(logits)),reference_answers]\n",
    "    \n",
    "    xentropy = - logits_for_answers + np.log(np.sum(np.exp(logits),axis=-1))\n",
    "    \n",
    "    return xentropy\n",
    "\n",
    "def grad_softmax_crossentropy_with_logits(logits, reference_answers):\n",
    "    \"\"\"Compute crossentropy gradient from logits[batch,n_classes] and ids of correct answers\"\"\"\n",
    "    ones_for_answers = np.zeros_like(logits)\n",
    "    # Indicator\n",
    "    ones_for_answers[np.arange(len(logits)),reference_answers] = 1\n",
    "    \n",
    "    # softmax\n",
    "    softmax = np.exp(logits) / np.exp(logits).sum(axis=-1,keepdims=True)\n",
    "\n",
    "    # indicator * (1 - softmax)\n",
    "    return (- ones_for_answers + softmax) / logits.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Часть 2. Реализация и применение графа вычислений"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В этой части мы научимся объединять слои в единый граф вычислений, а также использовать его для прямого прохода (вычисления прогнозов на объектах) и обратного прохода (обновление обучаемых параметров графа), после чего у нас появится возможность обучить граф. Для простоты реализации будем считать, что в нашем случае граф вычислений задается как список (python list) слоёв из числа реализованных ранее."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ниже приведен код для скачивания датасета MNIST с официального сайта. Датасет делится на тренировочную и тестовую части. Тренировочная дополнительно разбивается на тренировочную и валидационную."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "import time\n",
    "import gzip\n",
    "from urllib.request import urlretrieve\n",
    "\n",
    "def load_mnist(flatten=False):\n",
    "    \"\"\"taken from https://github.com/Lasagne/Lasagne/blob/master/examples/mnist.py\"\"\"\n",
    "    # We first define a download function, supporting both Python 2 and 3.\n",
    "\n",
    "    def download(filename, source='http://yann.lecun.com/exdb/mnist/'):\n",
    "        print(\"Downloading %s\" % filename)\n",
    "        urlretrieve(source + filename, filename)\n",
    "\n",
    "    # We then define functions for loading MNIST images and labels.\n",
    "    # For convenience, they also download the requested files if needed.\n",
    "\n",
    "    def load_mnist_images(filename):\n",
    "        if not os.path.exists(filename):\n",
    "            download(filename)\n",
    "        # Read the inputs in Yann LeCun's binary format.\n",
    "        with gzip.open(filename, 'rb') as f:\n",
    "            data = np.frombuffer(f.read(), np.uint8, offset=16)\n",
    "        # The inputs are vectors now, we reshape them to monochrome 2D images,\n",
    "        # following the shape convention: (examples, channels, rows, columns)\n",
    "        data = data.reshape(-1, 1, 28, 28)\n",
    "        # The inputs come as bytes, we convert them to float32 in range [0,1].\n",
    "        # (Actually to range [0, 255/256], for compatibility to the version\n",
    "        # provided at http://deeplearning.net/data/mnist/mnist.pkl.gz.)\n",
    "        return data / np.float32(256)\n",
    "\n",
    "    def load_mnist_labels(filename):\n",
    "        if not os.path.exists(filename):\n",
    "            download(filename)\n",
    "        # Read the labels in Yann LeCun's binary format.\n",
    "        with gzip.open(filename, 'rb') as f:\n",
    "            data = np.frombuffer(f.read(), np.uint8, offset=8)\n",
    "        # The labels are vectors of integers now, that's exactly what we want.\n",
    "        return data\n",
    "\n",
    "    # We can now download and read the training and test set images and labels.\n",
    "    X_train = load_mnist_images('train-images-idx3-ubyte.gz')\n",
    "    y_train = load_mnist_labels('train-labels-idx1-ubyte.gz')\n",
    "    X_test = load_mnist_images('t10k-images-idx3-ubyte.gz')\n",
    "    y_test = load_mnist_labels('t10k-labels-idx1-ubyte.gz')\n",
    "\n",
    "    # We reserve the last 10000 training examples for validation.\n",
    "    X_train, X_val = X_train[:-10000], X_train[-10000:]\n",
    "    y_train, y_val = y_train[:-10000], y_train[-10000:]\n",
    "    \n",
    "    if flatten:\n",
    "        X_train = X_train.reshape([X_train.shape[0], -1])\n",
    "        X_val = X_val.reshape([X_val.shape[0], -1])\n",
    "        X_test = X_test.reshape([X_test.shape[0], -1])\n",
    "\n",
    "    # We just return all the arrays in order, as expected in main().\n",
    "    # (It doesn't matter how we do this as long as we can read them again.)\n",
    "    return X_train, y_train, X_val, y_val, X_test, y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на несколько объектов из этого датасета."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "X_train, y_train, X_val, y_val, X_test, y_test = load_mnist(flatten=True)\n",
    "\n",
    "plt.figure(figsize=[6, 6])\n",
    "for i in range(4):\n",
    "    plt.subplot(2, 2, i+1)\n",
    "    plt.title(\"Label: %i\"%y_train[i])\n",
    "    plt.imshow(X_train[i].reshape([28, 28]),cmap='gray');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 4**\n",
    "\n",
    "Используя прототип ниже, реализуйте прямой и обратный проход по графу вычислений и функцию для получения предсказаний метки класса.\n",
    "\n",
    "**Решение**. Всё просто: сначала прямой проход по сети forward с вычисления input'ов для каждого слоя, а затем -- обратный (backward) для вычисления производных по весам каждого слоя."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "class NeuralNetwork:\n",
    "    def __init__(self, layers):\n",
    "        \"\"\"\n",
    "        layers — list of Layer objects\n",
    "        \"\"\"\n",
    "        \n",
    "        self.layers = layers\n",
    "        \n",
    "    def forward(self, X):\n",
    "        \"\"\"\n",
    "        Compute activations of all network layers by applying them sequentially.\n",
    "        Return a list of activations for each layer. \n",
    "        Make sure last activation corresponds to network logits.\n",
    "        \"\"\"\n",
    "\n",
    "        \n",
    "        activations = []\n",
    "        input = X\n",
    "        n_layers = len(self.layers)\n",
    "        \n",
    "        # calculating the inputs of all layers\n",
    "        for i in range(n_layers):\n",
    "            X = self.layers[i].forward(X)\n",
    "            activations.append(X)\n",
    "\n",
    "        assert len(activations) == len(self.layers)\n",
    "        return activations\n",
    "\n",
    "    def predict(self, X):\n",
    "        \"\"\"\n",
    "        Use network to predict the most likely class for each sample.\n",
    "        \"\"\"\n",
    "        logits = self.forward(X)[-1]\n",
    "        return logits.argmax(axis=-1)\n",
    "\n",
    "    def backward(self, X, y):\n",
    "        \"\"\"\n",
    "        Train your network on a given batch of X and y.\n",
    "        You first need to run forward to get all layer activations.\n",
    "        Then you can run layer.backward going from last to first layer.\n",
    "\n",
    "        After you called backward for all layers, all Dense layers have already made one gradient step.\n",
    "        \"\"\"\n",
    "\n",
    "        # Get the layer activations\n",
    "        layer_activations = self.forward(X)\n",
    "        layer_inputs = [X] + layer_activations  # layer_input[i] is an input for network[i]\n",
    "        logits = layer_activations[-1]\n",
    "\n",
    "        # Compute the loss and the initial gradient\n",
    "        loss = softmax_crossentropy_with_logits(logits, y)\n",
    "        loss_grad = grad_softmax_crossentropy_with_logits(logits, y)\n",
    "        out_der = loss_grad\n",
    "        n_layers = len(self.layers)\n",
    "\n",
    "        for i in np.arange(n_layers)[::-1]:\n",
    "            l = self.layers[i]\n",
    "            \n",
    "            # calculating gradients for each layer from end to begin\n",
    "            # given the gradient from the previous layer\n",
    "            der_so_far = l.backward(layer_inputs[i], out_der)\n",
    "            out_der = der_so_far\n",
    "\n",
    "        return np.mean(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "layers = []\n",
    "hidden_layers_size = 40\n",
    "layers.append(Dense(X_train.shape[1], hidden_layers_size))\n",
    "layers.append(ReLU())\n",
    "layers.append(Dense(hidden_layers_size, hidden_layers_size))\n",
    "layers.append(ReLU())\n",
    "layers.append(Dense(hidden_layers_size, 10))\n",
    "\n",
    "model = NeuralNetwork(layers)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Все готово для запуска обучения. Ниже определена функции для итерации по батчам, принимающая на вход картинки, метки классов, а также размер батча и флаг, отвечающий за перемешивание примеров."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import trange\n",
    "\n",
    "def iterate_minibatches(inputs, targets, batchsize, shuffle=False, seed=1234):\n",
    "    assert len(inputs) == len(targets)\n",
    "    \n",
    "    indices = np.arange(len(inputs)).astype(np.int32)\n",
    "    if shuffle:\n",
    "        np.random.seed(seed)\n",
    "        np.random.shuffle(indices)\n",
    "    \n",
    "    for start_idx in trange(0, len(inputs) - batchsize + 1, batchsize):\n",
    "        batch = indices[start_idx:start_idx + batchsize]\n",
    "        \n",
    "        yield inputs[batch], targets[batch]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ниже приведены функции для обучения модели и отслеживания значения loss на тренироворочной части и на валидации."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "train_log = []\n",
    "val_log = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14\n",
      "Train accuracy: 0.90822\n",
      "Val accuracy: 0.9096\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "for epoch in range(15):\n",
    "    for x_batch, y_batch in iterate_minibatches(X_train, y_train, batchsize=32, shuffle=True):\n",
    "        model.backward(x_batch, y_batch)\n",
    "    \n",
    "    train_log.append(np.mean(model.predict(X_train) == y_train))\n",
    "    val_log.append(np.mean(model.predict(X_val) == y_val))\n",
    "    \n",
    "    clear_output()\n",
    "    print(\"Epoch\", epoch)\n",
    "    print(\"Train accuracy:\", train_log[-1])\n",
    "    print(\"Val accuracy:\", val_log[-1])\n",
    "    plt.plot(train_log, label='train accuracy')\n",
    "    plt.plot(val_log, label='val accuracy')\n",
    "    plt.legend(loc='best')\n",
    "    plt.grid()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Часть 3. Keras"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поажлуй с керасом мы разберёмся в следующий раз. Пока что просто спойлер. =)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.losses import categorical_crossentropy\n",
    "from tensorflow.keras.optimizers import SGD\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_train = to_categorical(y_train, 10)\n",
    "y_test = to_categorical(y_test, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add() # создайте аналогичную сеть как вы делали выше\n",
    "\n",
    "model.compile(loss=categorical_crossentropy,\n",
    "              optimizer=SGD(lr=0.01),\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "model.fit(X_train, y_train,\n",
    "          batch_size=32,\n",
    "          epochs=15,\n",
    "          verbose=1,\n",
    "          validation_data=(X_test, y_test))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
